{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Outline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this file we construct the convex polytopal region denoted $\\overline{R_f}$ for FCJ.\n",
    "\n",
    "Which are intersections of the form $$b\\le Ax \\le b+1.$$\n",
    "\n",
    "We aim to determine the number of cases where $R_f = \\emptyset$. \n",
    "\n",
    "We will check this for the cases: $$G62,G63,G72,G73$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import itertools\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_formatted_hyperplanes_txt(lbm,phi_G): #put into format of sage b<Ax<b+1\n",
    "    \n",
    "    \"\"\"\n",
    "    Inputs:\n",
    "    phi  records indexs of cuts with cutfraction in inequalities.        phi_G62={\"1\":1,\"2\":1.5,\"3\":1,\"4\":1,\"5\":1,\"6\":1.5,\"12\":1.5,\"23\":1.5,\"34\":1,\"45\":1,\"56\":1.5,\"61\":1.5,\"123\":1.5,\"234\":1.5,\"345\":1,\"456\":1.5,\"561\":1.5,\"612\":1}\n",
    "    lbm= line bundle mulidegrees given by chip-adding\n",
    "    \n",
    "    Purpose: Get list of inquality data to feed into Sages Polyhedron function\n",
    "    https://doc.sagemath.org/html/en/reference/discrete_geometry/sage/geometry/polyhedron/constructor.html\n",
    "    \n",
    "    Polyhedron(ieqs=[(0,1,0),(0,0,1),(1,-1,-1)]).Hrepresentation()\n",
    "    (An inequality (-1, -1) x + 1 >= 0,\n",
    "     An inequality (1, 0) x + 0 >= 0,\n",
    "     An inequality (0, 1) x + 0 >= 0)\n",
    "    \n",
    "    \n",
    "    \"\"\"\n",
    "    n=len(lbm[0])\n",
    "    inequals=[]        \n",
    "    for d in lbm: #creates row at a time\n",
    "        for indexor in list(phi_G.keys()):\n",
    "            \n",
    "            def sum_comps(comp,indexor): #Done\n",
    "                \"\"\"returns the sum of the components of comp in the position by indexor\"\"\"\n",
    "                #for d and phi\n",
    "                sum_l=[comp[int(i)-1] for i in indexor]\n",
    "                return sum(sum_l)\n",
    "            \n",
    "            \n",
    "            cf=phi_G[indexor] # want value\n",
    "            constant_indx= sum_comps(d,indexor)        \n",
    "        \n",
    "            l_i= [ [int(x)-1,] for x in indexor] #x,y,z.. terms for indexors in Rf space #Indexs for phi keys\n",
    "            \n",
    "\n",
    "            def lower_part(constant_indx,l_i,indexor,cf,n):\n",
    "                \n",
    "                bterm=[constant_indx+cf] # as list\n",
    "                base=np.zeros(n)\n",
    "                l=[(-1,i) for i in indexor] # put -1 in the ith position given be indexor.\n",
    "                \n",
    "                for item in l:\n",
    "                    ipos = int(item[1])-1 # ith position\n",
    "                    val=item[0]\n",
    "                    base[ipos]=val\n",
    "                \n",
    "                xyz=base\n",
    "                \n",
    "                ineq=bterm+list(xyz) # [b,x,y,z...] want to concat\n",
    "                \n",
    "                return ineq\n",
    "\n",
    "            def upper_part(constant_indx,l_i,indexor,cf,n):\n",
    "                \n",
    "                #Remember upper part of modulus inequality.\n",
    "\n",
    "                bterm=[-constant_indx+cf] # as list\n",
    "                base=np.zeros(n)\n",
    "                l=[(1,i) for i in indexor] # put -1 in the ith position given be indexor.\n",
    "                \n",
    "                for item in l:\n",
    "                    ipos = int(item[1])-1 # ith position\n",
    "                    val=item[0]\n",
    "                    base[ipos]=val\n",
    "                \n",
    "                xyz=base\n",
    "                \n",
    "                ineq=bterm+list(xyz) # [b,x,y,z...] want to concat\n",
    "                \n",
    "                return ineq\n",
    "\n",
    "            res_lower=lower_part(constant_indx,l_i,indexor,cf,n)\n",
    "            \n",
    "            # print(\"res_lower\",res_lower)\n",
    "            res_upper=upper_part(constant_indx,l_i,indexor,cf,n)\n",
    "            \n",
    "            # print(\"res_upper\",res_upper)\n",
    "            res_combined= [res_lower,res_upper]\n",
    "            \n",
    "            # print(\"--------\")\n",
    "\n",
    "            inequals=inequals+res_combined\n",
    "        \n",
    "    return inequals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def poly_size(data):\n",
    "    Poly=Polyhedron(ieqs=data)\n",
    "    dimP=dim(Poly)\n",
    "    print(f\"The dimension of the polytope is: {dimP}\")\n",
    "    return dimP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example test case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dimension of the polytope is: 4\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"We take G455 and an example set of line bundle multidegrees.\"\n",
    "\n",
    "lbm=np.array([[ 0.,  0.,  1.,  1.],\n",
    "       [ 0.,  1.,  0.,  1.],\n",
    "       [ 0.,  1.,  1.,  0.],\n",
    "       [ 0.,  2.,  0.,  0.],\n",
    "       [ 1.,  0.,  0.,  1.],\n",
    "       [ 1.,  0.,  1.,  0.],\n",
    "       [ 1.,  1.,  0.,  0.],\n",
    "       [ 1.,  1.,  1., -1.]])\n",
    "\n",
    "phi_G455={\"1\":1,\"2\":1.5,\"3\":1,\"4\":1.5,\"12\":1.5,\"23\":1.5,\"34\":1.5,\"41\":1.5}\n",
    "data=get_formatted_hyperplanes_txt(lbm,phi_G455)\n",
    "poly_size(data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# G62"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle_in = open(path, \"rb\")\n",
    "data = pickle.load(pickle_in)\n",
    "pickle_in.close()\n",
    "\n",
    "phi_G62={\"1\":1,\"2\":1.5,\"3\":1,\"4\":1,\"5\":1,\"6\":1.5,\"12\":1.5,\"23\":1.5,\"34\":1,\"45\":1,\"56\":1.5,\"61\":1.5,\"123\":1.5,\"234\":1.5,\"345\":1,\"456\":1.5,\"561\":1.5,\"612\":1}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# G63"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_G63={\"1\":1,\"2\":1,\"3\":1.5,\"4\":1,\"5\":1,\"6\":1.5,\"12\":1,\"23\":1.5,\"34\":1.5,\"45\":1,\"56\":1.5,\"61\":1.5,\"123\":1.5,\"234\":1.5,\"345\":1.5,\"456\":1.5,\"561\":1.5,\"612\":1.5}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# G72"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_G72={\"1\":1,\"2\":1.5,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1.5,\"12\":1.5,\"23\":1.5,\"34\":1,\"45\":1,\"56\":1,\"67\":1.5,\"71\":1.5,\"123\":1.5,\"234\":1.5,\"345\":1,\"456\":1,\"567\":1.5,\"671\":1.5,\"712\":1}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# G73"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi_G73={\"1\":1,\"2\":1,\"3\":1.5,\"4\":1,\"5\":1,\"6\":1,\"7\":1.5,\"12\":1,\"23\":1.5,\"34\":1.5,\"45\":1,\"56\":1,\"67\":1.5,\"71\":1.5,\"123\":1.5,\"234\":1.5,\"345\":1.5,\"456\":1,\"567\":1.5,\"671\":1.5,\"712\":1.5}\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 9.2",
   "language": "sage",
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
